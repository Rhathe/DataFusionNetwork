package mywsn;

import org.mixim.modules.nic.Nic802154_TI_CC1100;

import org.mixim.base.modules.*;

module BaseNode
{
    parameters:
        string applType; //type of the application layer
        string netwType = "BaseNetwLayer"; //type of the network layer
        string mobType = "BaseMobility"; //type of the mobility module
        @display("bgb=,,white,,");
    gates:
        input radioIn; // gate for sendDirect
    submodules:
        utility: BaseUtility {
            parameters:
                @display("p=130,38;b=24,24,rect,black;i=block/blackboard");
        }
        arp: BaseArp {
            parameters:
                @display("p=130,101;b=24,24,rect,blue;i=block/process");
        }
        mobility: <mobType> like IBaseMobility {
            parameters:
                @display("p=130,166;i=block/cogwheel");
        }
        appl: <applType> like IBaseApplLayer {
            parameters:
                @display("p=59,38;i=app");
        }
        net: <netwType> like IBaseNetwLayer {
            parameters:
                @display("p=60,101;i=block/layer");
		debug = false;
		stats = false;
		headerLength = 32bit;
        }
        nic: Nic802154_TI_CC1100 {
            parameters:
                @display("p=60,166;i=block/ifcard");

		
		/*
		//################ PhyLayer parameters #####################//
		phy.thermalNoise = -100dBm;
		phy.usePropagationDelay = false;
		phy.useThermalNoise = false;
		
		phy.analogueModels = xmldoc("config.xml");
		phy.decider = xmldoc("config.xml");

		phy.timeRXToTX = 0s;
		phy.timeRXToSleep = 0s;

		phy.timeTXToRX = 0s;
		phy.timeTXToSleep = 0s;

		phy.timeSleepToRX = 0s;
		phy.timeSleepToTX = 0s;

		phy.sensitivity = -1000dBm;
		phy.maxTXPower = 100.0mW;

		phy.initialRadioState = 0;

		//################ MAC layer parameters ####################
		mac.queueLength = 5;
		mac.headerLength = 24bit;
		mac.bitrate = 15360bps;
		mac.txPower = 100mW;
		mac.stats = true;
		mac.trace = true;

		mac.ccaDetectionTime = 0.0005s;
		mac.aTurnaroundTime = 0s; //no radio switch times
		mac.rxSetupTime = 0s; //no radio switch times

		mac.backoffMethod = "linear";
		mac.macMaxCSMABackoffs = 14;
		mac.contentionWindow = 20;
		mac.aUnitBackoffPeriod = 0.04s;

		// MAC Ack settings (disabled)
		mac.useMACAcks = false;
		mac.ackLength = 0bit;
		mac.macMaxFrameRetries = 0;
		mac.macAckWaitDuration = 0s;
		mac.sifs = 0s;

		mac.macMinBE = 0; //only used for exponential backoffs
		mac.macMaxBE = 0; //only used for exponential backoffs
		*/
        }
    connections:
        nic.upperGateOut --> net.lowerGateIn;
        nic.upperGateIn <-- net.lowerGateOut;
        nic.upperControlOut --> { @display("ls=red;m=m,70,0,70,0"); } --> net.lowerControlIn;
        nic.upperControlIn <-- { @display("ls=red;m=m,70,0,70,0"); } <-- net.lowerControlOut;

        net.upperGateOut --> appl.lowerGateIn;
        net.upperGateIn <-- appl.lowerGateOut;
        net.upperControlOut --> { @display("ls=red;m=m,70,0,70,0"); } --> appl.lowerControlIn;
        net.upperControlIn <-- { @display("ls=red;m=m,70,0,70,0"); } <-- appl.lowerControlOut;

        radioIn --> nic.radioIn;

}
